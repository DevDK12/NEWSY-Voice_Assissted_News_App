intent('What is this app do?', 
      reply('This is NEWSY , voice assissted news app'));
intent('What is your name ?','(who| what ) are you ?',
    reply('My name is Newsy , I am here to ease your life so that you can get all the news with voice command only',
          'I am Newsy, your News assisstant. Would you like something in News ?'));


intent('What can I do here ?', 'what does this app do?',
       'What are you supposed to do?', 
       'How can I get news?',
       'Can you tell me what to do here?','I am stuck here', 'I am new here', 'I dont know anything here',
        'help me',
      reply('You can search news by categories , terms or sources',
            'Try saying (Give me the latest news | Give me the top headlines | India|ABC news| football| cricket| bollywood| Spiderman | Attack on titan |samsung | realme | CNN | NFT| technology | Metaverse)',
           ))


intent(
    'hello',
    'hi (there|)',
    'what\'s up',
    reply(
        'Hello',
        'Hi (there|do you need news updates?)',
        'Hi, which news can I get for you?',
    ),
);

question(
    'how are you',
    reply('I\'m doing well. (Thank you| would you be liked to get updated about the latest?)'),
);



question(
    '(Who is your boss|who created you?)',
    reply(
        'My boss is the one who programmed me. (But you\'re my boss right now|)',
        'You\'re the boss. What do you need?',
    ),
);

question(
    'Are you (busy|occupied)',
    reply(
        'I\'m never too busy. What would you like?',
        'I\'m available now. What would you like?',
        'No, what do you need?',
    ),
);

question(
    'You are (a|an|) $(Q chatbot|robot|AI)',
    reply(
        'I\'m a (sophisticated|advanced) $(Q)',
        'I\'m an advanced AI',
        'I\'m not a $(Q chatbot), I\'m Newsy (your News Voice assisstant|).',
    ),
);

question(
    'My name is $(NAME)',
    reply('(Nice to meet you|Hi|Hello) $(NAME) (I\'m Newsy |my name is Newsy)'),
);

question(
    'Talk about yourself',
    '(Tell me|Talk) some(thing|stuff|things) about (you|yourself)',
    'I want to know (more about you|you better)',
    reply('I\'m Nesy, a voice assisted News app, and i help you read your daily news, (within this application.|) (I can help you get what you need|I can help you with anything within my programming).'),
);

question(
    '$(L Nice|Good|Great) to $(Q see|meet|talk to) you ',
    reply('$(L) to $(Q) you too'),
);

question(
    'Why are you here',
    'Why do you exist',
    reply('I\'m here to help you get (what|anything) you need in this news application.'),
);

question(
    '(test|testing)',
    '(test test|testing testing)',
    '(test test test|testing testing testing)',
    '(I am|) just testing you',
    reply('Test away (and let me know how I\'m doing|)'),
);





const API_KEY = 'cb8abb3be19f4b5d9e7176a2de186bfe';
let savedArticles = [];

// News by Source
intent('give me the news from $(source* (.*))', (p) => {
    let NEWS_API_URL = `https://newsapi.org/v2/top-headlines?apiKey=${API_KEY}`;
    
    if(p.source.value) {
        NEWS_API_URL = `${NEWS_API_URL}&sources=${p.source.value.toLowerCase().split(" ").join('-')}`
    }
    
    api.request(NEWS_API_URL, (error, response, body) => {
        const { articles } = JSON.parse(body);
        
        savedArticles = articles;
        
        if(!articles.length) {
            p.play('Sorry, please try searching for news from a different source');
            return;
        }
        
        //savedArticles = articles;
        
        p.play({ command: 'newHeadlines', articles });
        p.play(`Here are the (latest|recent) ${p.source.value}.`);
  
        //p.play('Would you like me to read the headlines?');
        //p.then(confirmation);
    });
})

// News by Term
intent('what\'s up with $(term* (.*))', (p) => {
    let NEWS_API_URL = `https://newsapi.org/v2/everything?apiKey=${API_KEY}`;
    
    if(p.term.value) {
        NEWS_API_URL = `${NEWS_API_URL}&q=${p.term.value}`
    }
    
    api.request(NEWS_API_URL, (error, response, body) => {
        const { articles } = JSON.parse(body);
        
        savedArticles = articles;
               
        if(!articles.length) {
            p.play('Sorry, please try searching for something else');
            return;
        }        
             
        p.play({ command: 'newHeadlines', articles });
        p.play(`Here are the (latest|recent) articles on ${p.term.value} news.`);
  
        p.play('Would you like me to read the headlines?');
        p.then(confirmation);
    });
})

// News by Categories
const CATEGORIES = ['business', 'entertainment', 'general', 'health', 'science', 'sports', 'technology'];
const CATEGORIES_INTENT = `${CATEGORIES.map((category) => `${category}~${category}`).join('|')}|`;

intent(`(show|what is|tell me|what's|what are|what're|read) (the|) (recent|latest|) $(N news|headlines) (in|about|on|) $(C~ ${CATEGORIES_INTENT})`,
  `(read|show|get|bring me|give me) (the|) (recent|latest) $(C~ ${CATEGORIES_INTENT}) $(N news|headlines)`, (p) => {
    let NEWS_API_URL = `https://newsapi.org/v2/top-headlines?apiKey=${API_KEY}&country=in`;
    
    if(p.C.value) {
        NEWS_API_URL = `${NEWS_API_URL}&category=${p.C.value}`
    }
    
    api.request(NEWS_API_URL, (error, response, body) => {
        const { articles } = JSON.parse(body);
        
               
        if(!articles.length) {
            p.play('Sorry, please try searching for a different category');
            return;
        }
        
        savedArticles = articles;
        
        p.play({ command: 'newHeadlines', articles });
        if(p.C.value) {
            p.play(`Here are the (latest|recent) articles on ${p.C.value}.`);        
        }
        else {
            p.play(`Here are the (latest|recent) news`);   
        }
        
        p.play('WOuld you like me to read the headlines');
        p.then(confirmation);
  
        
    });
});

const confirmation = context(() => {
    intent('yes', (p) => {
        for(let i = 0 ; i < savedArticles.length; i++){
            p.play({ command: 'highlight', article: savedArticles[i]});
            p.play(`${savedArticles[i].title}`);
        }
    })
    
    intent('no', (p) => {
        p.play('sure, sounds good to me')        
    })
})

intent('open (the|) (article|) (number|) $(number* (.*))', (p) => {
    if(p.number.value) {
        p.play({ command:'open', number: p.number.value, articles: savedArticles})
    }
})

intent('(go|) back', (p) => {
    p.play('Sure, going back');
    p.play({ command: 'newHeadlines', articles: []})
})